<?php
/**
 * Файл вспомогательных функций для логирования.
 *
 * Содержит константу `LOG_FILE` и публичные функции `logError` и `logInfo`
 * для записи сообщений разных уровней. Общая логика вынесена во
 * внутреннюю функцию `writeLog`.
 */

// Путь к файлу логов приложения.
const LOG_FILE = __DIR__ . '/logs/app.log';

/**
 * Приватная функция, осуществляющая запись строки в файл логов.
 *
 * Выполняет подготовку каталога, экранирование перевода строк
 * и добавление временной метки с указанием уровня сообщения.
 * Функция помечена как `@internal`, поскольку предполагается
 * её использование только внутри данного файла.
 *
 * @internal
 *
 * @param string $message Текст сообщения, подлежащего записи.
 * @param string $level   Уровень логирования (например, `error` или `info`).
 *
 * @return void
 */
function writeLog(string $message, string $level): void
{
    // Определяем каталог, где должен находиться файл логов.
    $dir = dirname(LOG_FILE);
    // Если каталога нет, создаём его рекурсивно.
    if (!is_dir($dir)) {
        // Ограничиваем права доступа к каталогу логов.
        mkdir($dir, 0755, true);
    }

    // Удаляем из сообщения все переводы строк,
    // чтобы не нарушить структуру файла логов.
    $safeMessage = preg_replace("/[\r\n]+/", ' ', $message);

    // Формируем строку с текущей временной меткой.
    $time = date('c');

    // Строим итоговую запись с указанием уровня.
    $entry = sprintf('[%s] [%s] %s\n', $time, $level, $safeMessage);

    // Пытаемся записать строку в файл логов.
    $result = error_log($entry, 3, LOG_FILE);

    // Если запись не удалась, сообщаем об этом через предупреждение.
    if ($result === false) {
        trigger_error(
            sprintf(
                'Не удалось записать сообщение в лог-файл: %s',
                LOG_FILE
            ),
            E_USER_WARNING
        );
    }
}

/**
 * Записывает сообщение об ошибке в лог приложения.
 *
 * Вся логика записи инкапсулирована во внутренней функции `writeLog`,
 * здесь лишь передаётся уровень `error`.
 *
 * @param string $message Текст ошибки, которую требуется зафиксировать.
 *
 * @return void
 */
function logError(string $message): void
{
    // Перенаправляем сообщение во внутренний механизм логирования.
    writeLog($message, 'error');
}

/**
 * Записывает информационное сообщение в лог приложения.
 *
 * Вся служебная работа выполняется `writeLog`,
 * поэтому здесь только передаём уровень `info`.
 *
 * @param string $message Текст информационного сообщения.
 *
 * @return void
 */
function logInfo(string $message): void
{
    // Вызов универсальной функции записи с уровнем `info`.
    writeLog($message, 'info');
}
